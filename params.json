{"name":"【编程开发技术】C语言获取文件大小相关操作","tagline":"","body":"# C语言获取文件大小相关操作\r\n\r\n\r\n----------\r\n\r\n\r\n声明：引用请注明出处http://blog.csdn.net/lg1259156776/\r\n\r\n---\r\n##**说明**\r\n通常在希望从文件中把数据全都出来赋值给一个数组或者某一个指针，然后再进行相关的数据处理，比如解码等操作。而在进行赋值以前，数组或者指针都需要进行内存分配，通常对于数组可以直接以文件最大的字节数进行分配，或者指针用malloc也按照最大字节进行分配，但这样会造成内存浪费，对于追求完美的程序员来讲是不能容忍的。所以一种非常适合的方法是在读取文件具体数据之前，可以提前获得文件大小，然后利用malloc对指针进行内存分配，然后再进行数据读取，直接fread对应的数据即可。本文给出了一种最简单的获取文件大小的方法。\r\n\r\n##程序代码\r\n\r\n         FILE * fImage;\r\n    \t int Length;\r\n    \t unsigned char * ImageData;\r\n    \t if((fImage=fopen(\"Bretagne2.j2k\",\"rb\"))!=NULL)//寻找文件的大小!\r\n    \t {\r\n    \t\tfseek(fImage,0,SEEK_END);\r\n    \t\tLength=ftell(fImage);\r\n    \t\tprintf(\"data size = %ld\\n\",Length);\r\n    \t\tfseek(fImage,0,SEEK_SET);\r\n    \t\tImageData = (unsigned char *)malloc(Length);\r\n            fread(ImageData,1,Length,fImage);\r\n            if(!ImageData)\r\n    \t    {\r\n    \t    \tprintf(\"malloc error! \\n\");\r\n    \t\t    return;\r\n    \t    }\r\n    \t    fclose(fImage);\r\n        }\r\n        else \r\n        {\r\n    \t    printf(\"Open Data error!\\n\");\r\n     \t    return;\r\n        }\r\n\r\n\r\n首先是打开文件，然后将文件指针调整到文件尾部，然后使用ftell获取文件指针的位置，ftell返回值就是用于得到文件位置指针当前位置相对于文件首的偏移字节数。这样就很简单的获取这个文件的大小了。同时直接使用malloc进行内存分配，然后直接读取即可，十分方便。\r\n\r\n\r\n----------\r\n\r\n> 2015-10-18调试记录总结 张朋艺\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}